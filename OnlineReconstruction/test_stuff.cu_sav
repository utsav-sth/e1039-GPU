	/*
	//just for a test!!!
				
	fitarrays[index].output_parameters[0] = 0.;
	fitarrays[index].output_parameters[1] = 0.;
	fitarrays[index].output_parameters[2] = 0.;
	fitarrays[index].output_parameters[3] = 0.;
	fitarrays[index].lambda = 0.01f;
	fitarrays[index].chi2prev = 1.e20;

	//include fit here:
	if(ic[index].EventID==0)
	gpufit_algorithm_fitter(fitparams[0].max_iterations,
							fitarrays[index].n_iter, fitarrays[index].iter_failed, fitarrays[index].finished,
							fitarrays[index].state, fitarrays[index].skip, fitarrays[index].singular,
							fitparams[0].tolerance, fitparams[0].nparam,
							fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max,  
							fitarrays[index].output_parameters, fitarrays[index].prev_parameters, 
							fitarrays[index].chi2, fitarrays[index].chi2prev,
							fitarrays[index].values, fitarrays[index].derivatives, fitarrays[index].gradients,
							fitarrays[index].hessians, fitarrays[index].scaling_vector, 
							fitarrays[index].deltas, fitarrays[index].lambda,
							fitarrays[index].Ainv,
							//fitarrays[index].calc_matrix, fitarrays[index].abs_row, fitarrays[index].abs_row_index,
							npts, fitarrays[index].drift_dist, fitarrays[index].resolution, 
							fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, 
							fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz);					

	if(ic[index].EventID<20){
	printf("evt %d: %d %d %d\n", ic[index].EventID, fitarrays[index].n_iter, fitarrays[index].finished, fitarrays[index].state);
	printf("evt %d: track: x0 = %1.6f +- %1.6f, y0 = %1.6f +- %1.6f, tx = %1.6f +- %1.6f, ty = %1.6f +- %1.6f; chi2 = %1.6f\n", 
	ic[index].EventID,
	fitarrays[index].output_parameters[0], fitarrays[index].output_parameters_errors[0], 
	fitarrays[index].output_parameters[1], fitarrays[index].output_parameters_errors[1], 
	fitarrays[index].output_parameters[2], fitarrays[index].output_parameters_errors[2], 
	fitarrays[index].output_parameters[3], fitarrays[index].output_parameters_errors[3], 
	fitarrays[index].chi2);
	}
	*/
	/*
	//just for a test!!!
	if(ic[index].EventID==0){
	for(int n = 0; n<4; n++){
		fitarrays[index].output_parameters[n] = 0;
		fitarrays[index].output_parameters_errors[n] = 0;
		fitarrays[index].output_parameters_steps[n] = (fitparams[0].parameter_limits_max[n]-fitparams[n].parameter_limits_min[n])*0.1f;
	}
	printf("\n");
	
	REAL dca;
	REAL fixedpoint[3] = {0, 0, 0};
	fixedpoint_straighttrack_chi2minimizer(fitparams[0].max_iterations, fitparams[0].tolerance,
	fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max, 
	6, fitarrays[index].drift_dist, fitarrays[index].resolution, 
	fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, 
	fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz, 
	fitarrays[index].A, fitarrays[index].Ainv, fitarrays[index].B,
	4, fitarrays[index].output_parameters, fitarrays[index].output_parameters_errors, 
	fitarrays[index].prev_parameters, 
	fitarrays[index].output_parameters_steps, fitparams[0].lambda, fitarrays[index].derivatives, 
	fixedpoint, fitarrays[index].chi2, fitarrays[index].chi2prev, dca);

	//minimize_chi2(fitparams[0].max_iterations, fitparams[0].tolerance, fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max, 6, fitarrays[index].drift_dist, fitarrays[index].resolution, fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz, fitparams[0].nparam, fitarrays[index].output_parameters, fitarrays[index].prev_parameters, fitarrays[index].output_parameters_errors, fitarrays[index].output_parameters_steps, fitparams[0].lambda, fitarrays[index].derivatives, fitarrays[index].doublederivatives, fitarrays[index].chi2, fitarrays[index].chi2prev);
		
	if(ic[index].EventID==0)printf("track: x0 = %1.6f +- %1.6f, y0 = %1.6f +- %1.6f, tx = %1.6f +- %1.6f, ty = %1.6f +- %1.6f; chi2 = %1.6f\n", 
	fitarrays[index].output_parameters[0], fitarrays[index].output_parameters_errors[0], 
	fitarrays[index].output_parameters[1], fitarrays[index].output_parameters_errors[1], 
	fitarrays[index].output_parameters[2], fitarrays[index].output_parameters_errors[2], 
	fitarrays[index].output_parameters[3], fitarrays[index].output_parameters_errors[3], 
	fitarrays[index].chi2);


	fitarrays[index].output_parameters[0] = +94.92;
	fitarrays[index].output_parameters[1] = -50.00;
	fitarrays[index].output_parameters[2] = -0.14992;
	fitarrays[index].output_parameters[3] = +0.074924;
	REAL dca;
	chi2_straight(6, fitarrays[index].drift_dist, fitarrays[index].resolution, fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz, fitarrays[index].output_parameters, fitarrays[index].chi2, dca);
	
	if(ic[index].EventID==0)printf("track: x0 = %1.6f +- %1.6f, y0 = %1.6f +- %1.6f, tx = %1.6f +- %1.6f, ty = %1.6f +- %1.6f; chi2 = %1.6f\n", 
	fitarrays[index].output_parameters[0], fitarrays[index].output_parameters_errors[0], 
	fitarrays[index].output_parameters[1], fitarrays[index].output_parameters_errors[1], 
	fitarrays[index].output_parameters[2], fitarrays[index].output_parameters_errors[2], 
	fitarrays[index].output_parameters[3], fitarrays[index].output_parameters_errors[3], 
	fitarrays[index].chi2);
	}
	*/


				fitarrays[index].output_parameters[0] = 0.;
				fitarrays[index].output_parameters[1] = 0.;
				fitarrays[index].output_parameters[2] = 0.;
				fitarrays[index].output_parameters[3] = 0.;

				get_straighttrack_fixedpoint(npts, fitarrays[index].drift_dist, fitarrays[index].resolution, 
								fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, 
								fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz,
								fitarrays[index].A, fitarrays[index].Ainv, fitarrays[index].B,
								fitarrays[index].output_parameters, fitarrays[index].output_parameters_errors, 
								fixedpoint, fitarrays[index].chi2);

				fitarrays[index].lambda = 0.01f;
				fitarrays[index].chi2prev = 1.e20;
				
				/*
				gpufit_corr_algorithm_fitter(fitparams[0].max_iterations,
										fitarrays[index].n_iter, fitarrays[index].iter_failed, fitarrays[index].finished,
										fitarrays[index].state, fitarrays[index].skip, fitarrays[index].singular,
										fitparams[0].tolerance, 2, fitparams[0].nparam,
										fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max,  
										fitarrays[index].output_parameters, fitarrays[index].prev_parameters, 
										fitarrays[index].chi2, fitarrays[index].chi2prev,
										fitarrays[index].values, fitarrays[index].derivatives, fitarrays[index].gradients, 
										fitarrays[index].hessians, fitarrays[index].scaling_vector, 
										fitarrays[index].deltas, fitarrays[index].lambda,
										fitarrays[index].Ainv,
										//fitarrays[index].calc_matrix, fitarrays[index].abs_row, fitarrays[index].abs_row_index,
										fixedpoint,
										npts, fitarrays[index].drift_dist, fitarrays[index].resolution, 
										fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, 
										fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz);					
				*/

/*
				//if(ic[index].EventID==0){
				//straight_track_residual_minimizer(npts, fitarrays[index].drift_dist, fitarrays[index].resolution, fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz, fitarrays[index].A, fitarrays[index].Ainv, fitarrays[index].B, fitarrays[index].output_parameters, fitarrays[index].output_parameters_errors, fitarrays[index].chi2);
				
				//for(int n = 0; n<4; n++){
				//	fitarrays[index].output_parameters[n] = 0;
				//	fitarrays[index].output_parameters_errors[n] = 0;
				//	fitarrays[index].output_parameters_steps[n] = (fitparams[0].parameter_limits_max[n]-fitparams[n].parameter_limits_min[n])*0.1f;
				//}
				
				//if(ic[index].EventID==0)
				//fixedpoint_straighttrack_chi2minimizer(fitparams[0].max_iterations, fitparams[0].tolerance,
				//					fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max, 
				//					fitarrays[index].A, fitarrays[index].Ainv, fitarrays[index].B,
				//					fitparams[0].nparam, fitarrays[index].output_parameters, fitarrays[index].output_parameters_errors, 
				//					fitarrays[index].prev_parameters, 
				//					fitarrays[index].output_parameters_steps, fitparams[0].lambda, fitarrays[index].derivatives, 
				//					fixedpoint, fitarrays[index].chi2, fitarrays[index].chi2prev, dca);

				//minimize_chi2(fitparams[0].max_iterations, fitparams[0].tolerance, fitparams[0].parameter_limits_min, fitparams[0].parameter_limits_max, npts, fitarrays[index].drift_dist, fitarrays[index].resolution, fitarrays[index].p1x, fitarrays[index].p1y, fitarrays[index].p1z, fitarrays[index].deltapx, fitarrays[index].deltapy, fitarrays[index].deltapz, fitparams[0].nparam, fitarrays[index].output_parameters, fitarrays[index].prev_parameters, fitarrays[index].output_parameters_errors, fitarrays[index].output_parameters_steps, fitparams[0].lambda, fitarrays[index].derivatives, fitarrays[index].doublederivatives, fitarrays[index].chi2, fitarrays[index].chi2prev);
				*/
				
				